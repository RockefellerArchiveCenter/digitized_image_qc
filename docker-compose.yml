version: '3'

services:
  db:
    image: postgres:14.4
    environment:
      - PGUSER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - dbvolume:/var/lib/postgresql/data/
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    command: /var/www/digitized-av-qc/entrypoint.dev.sh
    environment:
      - ALLOWED_HOSTS=localhost
      - APPLICATION_PORT=${APPLICATION_PORT:-80}
      - SQL_ENGINE=django.db.backends.postgresql # Django database engine
      - SQL_DB_NAME=postgres # Database to connect to
      - SQL_DB_USER=postgres # Name of database user
      - SQL_DB_PASSWORD=postgres # Password for database user
      - SQL_HOST=db # Hostname for database
      - SQL_PORT=5432 # Port for database
      - STORAGE_PATH=storage # Path to original location of files, relative to BASE_DIR
      - DESTINATION_PATH=destination # Path to destination location of files, relative to BASE_DIR
      - AQUILA_BASEURL=http://aquila.dev.rockarch.org # BaseURL for Aquila instance
      - AWS_ACCESS_KEY_ID=foo # Access Key ID for AWS user
      - AWS_SECRET_ACCESS_KEY=bar # Secret Access Key for AWS user
      - AWS_ROLE_ARN=arn:aws:iam::123456789012:role/digitized-av-role # Role ARN for role to be assumed by AWS user
      - AWS_REGION=us-east-1 # AWS region in which infrastructure is located (string)
      - AWS_SNS_TOPIC=arn:aws:sns:us-east-1:123456789012:digitized-av-events # ARN for SNS Topic to be posted to (string)
    volumes:
      - .:/var/www/digitized-av-qc
    ports:
      - "${APPLICATION_PORT:-80}:${APPLICATION_PORT:-80}"
    depends_on:
      db:
        condition: service_healthy

volumes:
  dbvolume: